?:
    def namedtuple(typename, *field_name_toks):
        # Create and fill-in the class template
        typename = str(typename)
        field_names = tuple(repr(f) for f in field_name_toks)
        numfields = len(field_names)
        # tuple repr without parens or quotes
        argtxt = repr(field_names).replace("'", "")[1:-1]   
        reprtxt = ', '.join('%s=%%r' % name for name in field_names)
        dicttxt = ', '.join('%r: t[%d]' % (name, pos)
                            for pos, name in enumerate(field_names))
        defcode result:
            from operator import itemgetter
            class $typename$(tuple):
                '$typename$($argtxt$)'
                __slots__ = ()
                _fields = $field_names$

                def __new__(cls, $argtxt$):
                    return tuple.__new__(cls, $field_name_toks$)

                @classmethod
                def _make(cls, iterable, new=tuple.__new__, len=len):
                    'Make a new $typename$ object from a sequence or iterable'
                    result = new(cls, iterable)
                    if len(result) != $numfields$:
                        raise TypeError('Expected $numfields$ arguments, '
                                        'got %d' % len(result))
                    return result

                def __repr__(self):
                    return '$typename$($reprtxt$)' % self

                def _asdict(t):
                    'Return a new dict which maps field names to their values'
                    return { $dicttxt$ }

                def _replace(self, **kwds):
                    '''Return a new %(typename)s object replacing specified
                    fields with new values'''
                    result = self._make(map(kwds.pop, $field_names$, self))
                    if kwds:
                        raise ValueError('Got unexpected field names: %r'
                                         % kwds.keys())
                    return result

                def __getnewargs__(self):
                    return tuple(self)
                {% for i,name in enumerate(field_names) %}
                $name$ = property(itemgetter($i$)){%endfor %}
        return result

